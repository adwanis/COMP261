#BlueJ class context
comment0.target=HuffmanCoding
comment1.params=text
comment1.target=HuffmanCoding(java.lang.String)
comment1.text=\r\n\ This\ would\ be\ a\ good\ place\ to\ compute\ and\ store\ the\ tree.\r\n
comment2.params=text
comment2.target=java.util.Map\ buildFrequencyMap(java.lang.String)
comment3.params=frequencyMap
comment3.target=java.util.PriorityQueue\ buildPriorityQueue(java.util.Map)
comment4.params=priorityQueue
comment4.target=HuffmanCoding.Node\ buildHuffmanTree(java.util.PriorityQueue)
comment5.params=node\ code
comment5.target=void\ buildCodeMaps(HuffmanCoding.Node,\ java.lang.String)
comment6.params=text
comment6.target=java.lang.String\ encode(java.lang.String)
comment6.text=\r\n\ Take\ an\ input\ string,\ text,\ and\ encode\ it\ with\ the\ stored\ tree.\ Should\r\n\ return\ the\ encoded\ text\ as\ a\ binary\ string,\ that\ is,\ a\ string\ containing\r\n\ only\ 1\ and\ 0.\r\n
comment7.params=encoded
comment7.target=java.lang.String\ decode(java.lang.String)
comment7.text=\r\n\ Take\ encoded\ input\ as\ a\ binary\ string,\ decode\ it\ using\ the\ stored\ tree,\r\n\ and\ return\ the\ decoded\ text\ as\ a\ text\ string.\r\n
comment8.params=
comment8.target=java.lang.String\ getInformation()
comment8.text=\r\n\ The\ getInformation\ method\ is\ here\ for\ your\ convenience,\ you\ don't\ need\ to\r\n\ fill\ it\ in\ if\ you\ don't\ wan\ to.\ It\ is\ called\ on\ every\ run\ and\ its\ return\r\n\ value\ is\ displayed\ on-screen.\ You\ could\ use\ this,\ for\ example,\ to\ print\r\n\ out\ the\ encoding\ tree.\r\n
numComments=9
